// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAS.ScrapingManagementService.Infrastructure.Persistence.AppDataContext;

#nullable disable

namespace SAS.ScrapingManagementService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.DataSourceTypes.Entities.DataSourceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DataSourceTypes");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.DataSources.Entities.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataSourceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceTypeId");

                    b.HasIndex("DomainId");

                    b.HasIndex("PlatformId");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Platforms.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6835f670-2e5c-8000-b5bb-ea9b1705cede"),
                            Description = "Telegram social media platform",
                            Name = "Telegram"
                        },
                        new
                        {
                            Id = new Guid("6835f670-2e5c-8000-b5bb-ea9b1705cedb"),
                            Description = "Twitter/X social media platform",
                            Name = "Twitter"
                        });
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Scrapers.Entities.Scraper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScraperName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TasksHandled")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Scrapers");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.ScrapingDomains.Entities.ScrapingDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalisedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ScrapingDomains");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Settings.Entities.BlockedTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlockedTerms");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Settings.Entities.PipelineConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PipelineKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PipelineConfigs");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Settings.Entities.PipelineStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PipelineConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PipelineConfigId");

                    b.ToTable("PipelineStages");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Tasks.Entities.ScrapingTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ScraperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("ScraperId");

                    b.ToTable("ScrapingTasks");
                });

            modelBuilder.Entity("ScrapingTaskDataSource", b =>
                {
                    b.Property<Guid>("ScrapingTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScrapingTaskId", "DataSourceId");

                    b.HasIndex("DataSourceId");

                    b.ToTable("ScrapingTaskDataSources", (string)null);
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.DataSources.Entities.DataSource", b =>
                {
                    b.HasOne("SAS.ScrapingManagementService.Domain.DataSourceTypes.Entities.DataSourceType", "DataSourceType")
                        .WithMany()
                        .HasForeignKey("DataSourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAS.ScrapingManagementService.Domain.ScrapingDomains.Entities.ScrapingDomain", "Domain")
                        .WithMany("DataSources")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAS.ScrapingManagementService.Domain.Platforms.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataSourceType");

                    b.Navigation("Domain");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Settings.Entities.PipelineStage", b =>
                {
                    b.HasOne("SAS.ScrapingManagementService.Domain.Settings.Entities.PipelineConfig", "PipelineConfig")
                        .WithMany("Stages")
                        .HasForeignKey("PipelineConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PipelineConfig");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Tasks.Entities.ScrapingTask", b =>
                {
                    b.HasOne("SAS.ScrapingManagementService.Domain.ScrapingDomains.Entities.ScrapingDomain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAS.ScrapingManagementService.Domain.Scrapers.Entities.Scraper", "ScrapingExecutor")
                        .WithMany()
                        .HasForeignKey("ScraperId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Domain");

                    b.Navigation("ScrapingExecutor");
                });

            modelBuilder.Entity("ScrapingTaskDataSource", b =>
                {
                    b.HasOne("SAS.ScrapingManagementService.Domain.DataSources.Entities.DataSource", null)
                        .WithMany()
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAS.ScrapingManagementService.Domain.Tasks.Entities.ScrapingTask", null)
                        .WithMany()
                        .HasForeignKey("ScrapingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.ScrapingDomains.Entities.ScrapingDomain", b =>
                {
                    b.Navigation("DataSources");
                });

            modelBuilder.Entity("SAS.ScrapingManagementService.Domain.Settings.Entities.PipelineConfig", b =>
                {
                    b.Navigation("Stages");
                });
#pragma warning restore 612, 618
        }
    }
}
